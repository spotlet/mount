#!/bin/bash

set -o pipefail

## environment
export PREFIX="${PREFIX:-/usr/local}"
export SPOTLET="${SPOTLET:-${PREFIX}/spotlet}"
export SERVICE="${SERVICE:-${SPOTLET}/service}"
export APP="${APP:-${SERVICE}/app}"

## update path
export PATH="${SPOTLET}/bin:${SERVICE}/bin:${PATH}"

## return codes
export ERROR=10
export NEEDS_COMPILE=11

## ensure file exists
ensure () {
  local arg="${1}";
  local file="${2}";
  if ! test "${arg}" "${file}"; then
    echo >&2 "error: Missing ${file}"
    exit 1
  fi
}

## run a spin process
spin () {
  local cmd="${1}"
  shift
  ensure -f "${APP}/spin/${cmd}"
  ("${APP}/spin/${cmd}" "${@}")
  return $?
}

## main function
spotlet () {
  local rc=0

  ## ensures dependencies structure exists
  ensure -d "${PREFIX}"
  ensure -d "${SPOTLET}"
  ensure -d "${SERVICE}"
  ensure -d "${APP}"

  ## feature detect and determine if
  ## compilation is needed
  (spin 'detect')
  rc=$?
  if [ "${rc}" == "${ERROR}" ]; then
    return ${rc}
  elif [ "${rc}" == "${NEEDS_COMPILE}" ]; then
    (spin 'compile')
    if [ "${rc}" == "${ERROR}" ]; then
      return ${rc}
    fi
  fi

  ## run tests
  (spin 'test')
  rc=$?
  if [ "${rc}" == "${ERROR}" ]; then
    return ${rc}
  fi

  ## @TODO - handle test success

  ## notify
  (spin 'notify')
  rc=$?
  if [ "${rc}" == "${ERROR}" ]; then
    return ${rc}
  fi

  ## @TODO - handle notify success

  (spin 'release')
  rc=$?
  if [ "${rc}" == "${ERROR}" ]; then
    return ${rc}
  fi

  ## @TODO - handle release success

  (spin 'end' "${rc}")
  rc=$?
  if [ "${rc}" == "${ERROR}" ]; then
    return ${rc}
  fi

  ## @TODO - handle end success

  (spin 'run' "${@}")
  rc=$?

  ## propagate return codes less than
  ## 10 that fall below the range of
  ## status codes we care about
  if (( ${rc} < 10 )); then
    return ${rc}
  else
    return 0
  fi
}

## run
(spotlet "${@}")
exit $?

